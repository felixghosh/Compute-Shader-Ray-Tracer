#version 430 core

#define DEPTH   (3)
#define EPISLON (0.000001)
#define INF     (1.0 / 0.0)
#define FLT_MAX (3.402823466e+38)

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform image2D imgOutput;

// Sphere object
struct sphere_t {
    vec4  pos; // xyz contains center and w radius
    vec4  color; // alpha is unused
    float reflectivity;
    float refractivity;
};

// Triangle object
struct triangle_t {
    vec4 p0;
    vec4 p1;
    vec4 p2;
    vec4 color;
}; 

//Sphere buffer
layout (std430, binding=2) buffer sphere_data
{
    sphere_t spheres[];
};

//Triangle buffer
layout (std430, binding=3) buffer triangle_data
{
    triangle_t triangles[];
};

uniform vec3 light_position;
uniform int  n_spheres;
uniform int  n_triangles;
uniform vec3 camera_pos;
uniform float camera_angle;

const float near_plane_z = -5.0;
const float plane_width = 3.0;
const float plane_height = 3.0;

struct hit_data {
    vec3  color;
    vec3  position;
    vec3  normal;
    bool  front_facing;
    float reflectivity;
    float refractivity;
};

struct ray_t {
    vec3 origin;
    vec3 dir;
    float weight;
    int iter;
};

bool solve_quadratic(float A, float B, float C, out float t0, out float t1) {
    float d = B * B - 4.0f * A * C;
    if (d < 0.0f) return false;
    d = sqrt(d);
    t0 = (-B - d) / (2.0f * A);
    t1 = (-B + d) / (2.0f * A);
    return true;
}

bool sphere_intersect(vec3 ray_d, vec3 ray_o, vec3 sphere_c, float sphere_r, float tmin, float tmax, out float t) {
    vec3 o = ray_o - sphere_c;
    vec3 d = ray_d;

    // Compute polynom coefficients.
    float A = dot(d, d);
    float B = 2.0f * dot(d, o);
    float C = dot(o, o) - sphere_r * sphere_r;

    // Solve quadratic equation for ray enter/exit point t0, t1 respectively.
    float t0, t1;
    if (!solve_quadratic(A, B, C, t0, t1)) return false; // no real solutions -> ray missed

    if (t0 > tmax || t1 < tmin) {
        return false; // sphere before/after ray
    }
    if (t0 < tmin && t1 > tmax) return false; // ray inside sphere

    t = (t0 < tmin) ? t1 : t0;
    return true;
}

bool triangle_intersect(vec3 ray_d, vec3 ray_o, triangle_t triangle, float tmin, float tmax, inout float t, out vec3 normal) {
    vec3 p0 = triangle.p0.xyz;
    vec3 p1 = triangle.p1.xyz;
    vec3 p2 = triangle.p2.xyz;

    vec3 e1 = p1 - p0;
    vec3 e2 = p2 - p0;
    normal = normalize(cross(e1, e2));

    // Distance to origin from plane
    float D = dot(-normal,p0);

    // Solve for what t, the ray hits the plane (see:
    // https://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-rendering-a-triangle/ray-triangle-intersection-geometric-solution)
    float denominator = dot(normal, ray_d);
    if((abs(denominator)) < EPISLON){
        return false; //ray parallel to plane
    } 

    t = -(dot(normal, ray_o) + D) / denominator;

    if(t < tmin || t > tmax) return false; //Triangle behind ray

    vec3 P = ray_o + t*ray_d;
    

    //edge1
    vec3 edge0 = p1 - p0;
    vec3 vertexToPoint0 = P - p0;
    vec3 C = cross(edge0, vertexToPoint0);
    if(dot(normal, C) < 0) return false;

    //edge2
    vec3 edge1 = p2 - p1;
    vec3 vertexToPoint1 = P - p1;
    C = cross(edge1, vertexToPoint1);
    if(dot(normal, C) < 0) return false;

    //edge3
    vec3 edge2 = p0 - p2;
    vec3 vertexToPoint2 = P - p2;
    C = cross(edge2, vertexToPoint2);
    if(dot(normal, C) < 0) return false;

    return true;
}


mat4 rotationMatrix(vec3 axis, float angle)
{
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;
    
    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                0.0,                                0.0,                                0.0,                                1.0);
}

bool scene_intersection(vec3 ray_d, vec3 ray_o, bool any_hit, float tmin, float tmax, out hit_data hit)
{
    float nearest = INF;
    float t = 0;

    // purley diffused material as default
    hit.reflectivity = 0;
    hit.refractivity = 0;

    // Interare over our scene, searching for our first hit
    for (int i = 0; i < n_spheres; i++) {
        sphere_t sphere = spheres[i];
        vec3 center = sphere.pos.xyz;
        float radius = sphere.pos.w;

        // Colision testing
        if (sphere_intersect(ray_d, ray_o, center, radius, tmin, tmax, t) && t < nearest) { 
            hit.position = ray_o + t * ray_d;
            hit.normal = normalize(hit.position - center);
            hit.front_facing = dot(-ray_d, hit.normal) > 0;

            if (!hit.front_facing) {
                hit.normal = -hit.normal;
            }

            hit.color = sphere.color.xyz;
            hit.reflectivity = sphere.reflectivity;
            hit.refractivity = sphere.refractivity;
            

            nearest = t;

            if(any_hit) {
                return true;
            }
        }
    }

    for (int i = 0; i < n_triangles; i++) {
        triangle_t triangle = triangles[i];
        vec3 normal;

        // Colision testing
        if(triangle_intersect(ray_d, ray_o, triangle, tmin, tmax, t, normal) && t < nearest) {
            hit.position = ray_o + t * ray_d;
            hit.normal = normal;
            hit.color = triangle.color.xyz;
            hit.reflectivity = 0;
            hit.refractivity = 0;
            nearest = t;

            if(any_hit) {
                return true;
            }
        }
    }

    return nearest != INF;
}

vec3 process_ray(ray_t incoming, out ray_t outgoing[2])
{
    hit_data hit;
    hit_data shadow_hit;

    // Terminate iteration as default
    outgoing[0].iter = DEPTH;
    outgoing[1].iter = DEPTH;

    if (!scene_intersection(incoming.dir, incoming.origin, false, (incoming.iter == 0) ? 0 : 0.01, FLT_MAX, hit)) {
        return vec3(0.0,0.0,0.05);// evironment base color
    };

    float reflectivity = hit.reflectivity;
    float refractivity = hit.refractivity;
    vec3 direct_color = hit.color;
    vec3 light_dir = light_position - hit.position;
    vec3 L = normalize(light_dir);
    vec3 shadow_ray_d = L;
    vec3 shadow_ray_o = hit.position;

    if(scene_intersection(shadow_ray_d, shadow_ray_o, true, 0.01, length(light_dir), shadow_hit)) {
        direct_color = direct_color*0.1; 
    }

    // Phong diffuse
    vec3 diffuse = direct_color * max(0, dot(L, hit.normal));
    vec3 reflect_color = vec3(0, 0, 0);

    float diffuse_weight = incoming.weight * (1 - reflectivity - refractivity);
    if (reflectivity > 0) {
        outgoing[0].weight = incoming.weight * reflectivity;
        outgoing[0].iter = incoming.iter + 1;
        outgoing[0].dir = reflect(incoming.dir, hit.normal);
        outgoing[0].origin = hit.position;
    }

    if (refractivity > 0) {
        outgoing[1].weight = incoming.weight * refractivity;
        outgoing[1].iter = incoming.iter + 1;
        outgoing[1].dir = refract(normalize(incoming.dir), hit.normal, hit.front_facing? 1/1.5: 1.5);
        outgoing[1].origin = hit.position;
    }

    // If final iteration don't remove reflectivity/refractivity form diffuse weight
    if(incoming.iter == (DEPTH - 1)) {
        diffuse_weight = incoming.weight;
    }

    return diffuse * diffuse_weight;
}

vec3 trace_ray_recur(vec3 ray_d, vec3 ray_o)
{
    vec3 color = vec3(0, 0, 0);

    // Ray queue
    int size = 0;
    ray_t queue[1 << DEPTH];

    // Add initial ray to queue
    queue[0].dir = ray_d;
    queue[0].origin = ray_o;
    queue[0].iter = 0;
    queue[0].weight = 1;
    size++;

    vec3 ray_d_next, ray_o_next;
    bool has_refract;
    
    for (int i = 0; i < size; i++) {
        ray_t children[2];
        ray_t r = queue[i];
        color += process_ray(r, children);

        for (int j = 0; j < 2; j++) {
            // Append child we havn't reached termination
            if (children[j].iter < DEPTH) {
                queue[size++] = children[j];

                if (j == 1) {
                    //color = children[j].dir;
                }
            }
        }
    }

    return color;
}

void main() {
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

    float max_x = 5.0;
    float max_y = 5.0;
    ivec2 dims = imageSize(imgOutput);
    int x_clip = texelCoord.x * 2 - dims.x;
    int y_clip = texelCoord.y * 2 - dims.y;
    float x = float(x_clip) / dims.x;
    float y = float(y_clip) / dims.y;
    vec3 pos = vec3(x, y, 0.0);

    // Compute ray
    vec3 ray_o = camera_pos;
    vec3 plane_pos = vec3(camera_pos.x + x * plane_width, camera_pos.y + y * plane_height, camera_pos.z + near_plane_z);
    vec3 ray_d = plane_pos - ray_o;
    mat4 rot = rotationMatrix(vec3(0.0, 1.0, 0.0), camera_angle);
    ray_d = (rot * vec4(ray_d, 0.0)).xyz;
    ray_d = normalize(ray_d);

    // Ray-trace
    vec3 color = trace_ray_recur(ray_d, ray_o);

    // Write result to texture
    vec4 pixel = vec4(color, 1.0);
    imageStore(imgOutput, texelCoord, pixel);
}